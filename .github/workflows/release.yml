name: Flutter Release
on: workflow_dispatch

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create keystore directory
        run: mkdir -p ./flutter/android/app
      - name: Install GitHub CLI
        run: sudo apt-get install gh
      - name: Get version from data.json
        id: version
        run: echo "version=$(jq -r .version data.json)" >> $GITHUB_OUTPUT
      - name: Check if build version is incremented
        run: |
          latest_release=$(gh release view --json tagName -q .tagName || echo "none")
          current_version="${{ steps.version.outputs.version }}"
          if [ "$latest_release" = "$current_version" ]; then
            echo "Version has not been incremented."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Decode keystore
        id: keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ./flutter/android/app/upload-keystore.jks
      - name: Set signing env vars
        run: |
          echo "MYAPP_UPLOAD_STORE_FILE=./flutter/android/app/upload-keystore.jks" >> $GITHUB_ENV
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
        working-directory: ./flutter/
      - name: Get latest commit message not from GitHub Actions
        id: commit
        run: |
          git log --no-merges --pretty=format:"%s" -n 20 | grep -v 'github-actions' | head -n 1 > commit_message.txt
          echo "message=$(cat commit_message.txt)" >> $GITHUB_OUTPUT
      - name: Build APK
        run: >
          flutter build apk --release
          -P MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks
          -P MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
          -P MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          -P MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
        working-directory: ./flutter/
      - name: Make a web build
        run: flutter build web --release --base-href /play/
        working-directory: ./flutter/
      - name: Commit web build
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          cd ./flutter
          git add -A build/web -f
          if git diff --cached --quiet; then
            echo "No web build changes to commit"
          else
            git commit -m "chore(build): add web build for version ${{ steps.version.outputs.version }}"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}
          fi
      - name: Create tag for release
        id: create_tage
        run: |
          set -euo pipefail          
          VERSION="${{ steps.version.outputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="$(jq -r .version data.json || true)"
          fi
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "ERROR: no version available to tag" >&2
            exit 1
          fi
          echo "Using tag: $VERSION"
          if git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
          else
            git tag -a "$VERSION" -m "Release $VERSION"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} refs/tags/$VERSION
          fi
      - name: Package web build
        run: |
          cd ./flutter
          if [ -d build/web ]; then
            zip -r ../build_web_${{ steps.version.outputs.version }}.zip build/web
          else
            echo "No web build to upload"
            exit 1
          fi
      - name: Upload APK and web build to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: |
            ./flutter/build/app/outputs/flutter-apk/app-release.apk
            ./build_web_${{ steps.version.outputs.version }}.zip
          name: "[Flutter] v${{ steps.version.outputs.version }}"
          body: "${{ steps.commit.outputs.message }}"
      - name: Delete old Flutter release and tag
        run: |
          gh release delete "Flutter" --yes || echo "No Flutter release to delete"
          git push --delete origin Flutter || echo "No Flutter tag to delete"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create new Flutter release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Flutter
          files: |
            ./flutter/build/app/outputs/flutter-apk/app-release.apk
            ./build_web_${{ steps.version.outputs.version }}.zip
          name: "[Flutter] Latest"
          body: |
            Latest Flutter release for all platforms
            Version: ${{ steps.version.outputs.version }}
            ${{ steps.commit.outputs.message }}